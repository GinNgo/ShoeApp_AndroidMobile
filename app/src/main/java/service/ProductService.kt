package service

import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import model.Product
import repository.ProductRepository

class ProductService(
    private val repository: ProductRepository = ProductRepository()
) {

    // üü¢ L·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m
    suspend fun getAllProducts(): List<Product> = withContext(Dispatchers.IO) {
        try {
            repository.getAllProducts()
        } catch (e: Exception) {
            e.printStackTrace()
            emptyList()
        }
    }

    // üü¢ Th√™m s·∫£n ph·∫©m
    suspend fun addProduct(product: Product): Boolean = withContext(Dispatchers.IO) {
        try {
            repository.addProduct(product)
            true
        } catch (e: Exception) {
            e.printStackTrace()
            false
        }
    }

    // üü¢ L·∫•y s·∫£n ph·∫©m theo ID
    suspend fun getProductById(id: String): Product? = withContext(Dispatchers.IO) {
        try {
            repository.getProductById(id)
        } catch (e: Exception) {
            e.printStackTrace()
            null
        }
    }

    // üü¢ X√≥a s·∫£n ph·∫©m
    suspend fun deleteProduct(id: String): Boolean = withContext(Dispatchers.IO) {
        try {
            repository.deleteProduct(id)
            true
        } catch (e: Exception) {
            e.printStackTrace()
            false
        }
    }

    // üü° L·ªçc theo th∆∞∆°ng hi·ªáu
    fun filterByBrand(products: List<Product>, brand: String): List<Product> {
        return products.filter { it.brand?.equals(brand, ignoreCase = true) == true }
    }

    // üü° T√≠nh t·ªïng gi√°
    fun calculateTotalPrice(product: Product, quantity: Int): Double {
        return product.price * quantity
    }

    // üü° L·∫•y ·∫£nh ch√≠nh (primary image)
    fun getPrimaryImageUrl(product: Product): String? {
        return product.images.firstOrNull { it.isPrimary }?.imageUrl
    }
}
